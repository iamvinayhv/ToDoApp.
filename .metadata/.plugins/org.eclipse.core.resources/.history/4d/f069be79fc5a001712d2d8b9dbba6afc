package com.bridgelabz.toDoApp.controller;

import java.util.Collections;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.bridgelabz.toDoApp.model.Collaborator;
import com.bridgelabz.toDoApp.model.CollaboratorObject;
import com.bridgelabz.toDoApp.model.ToDo;
import com.bridgelabz.toDoApp.model.User;
import com.bridgelabz.toDoApp.service.serviceInterface.ToDoService;
import com.bridgelabz.toDoApp.service.serviceInterface.UserService;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException;

/**
 * this is the Controller class,it handles some the requests which are used to
 * managing the ToDo
 * 
 * @author bridgeit vinay
 */
@RestController
public class ToDoController {

	static Logger logger = Logger.getLogger(ToDoController.class);
	
	@Autowired
	private ToDoService toDoService;
	
	
	@Autowired
	private UserService userService;

	
	/**
	 * to add the new note
	 * 
	 * @param toDo, request, response
	 * @return String message and status
	 * @throws JsonProcessingException 
	 */
	@RequestMapping(value = "/addNote")
	public ResponseEntity<String> addNote(@RequestBody ToDo toDo, HttpServletRequest request, HttpServletResponse response) throws JsonProcessingException {

		HttpSession session = request.getSession(false);
		User user = (User) session.getAttribute("user");

		if ( session != null && user != null ) {
			
			toDo.setUser(user);
			
			try{
				toDoService.addNote(toDo);
				
				ObjectMapper mapper = new ObjectMapper();
				ObjectNode root = mapper.createObjectNode();
				
				
				root.put("status", "sucess");
				//toDo.setUser(null);
				root.putPOJO("todo", toDo); 
				
				String data = mapper.writeValueAsString(root);
				
				return new ResponseEntity<String>(data, HttpStatus.OK);
			}
			catch (Exception e) {
				
				ObjectMapper mapper = new ObjectMapper();
				ObjectNode root = mapper.createObjectNode();
				root.put("status", "failure");
				String data = mapper.writeValueAsString(root);
				
				return new ResponseEntity<String>(data,HttpStatus.NO_CONTENT);
			}
		}
		else {
			ObjectMapper mapper = new ObjectMapper();
			ObjectNode root = mapper.createObjectNode();
			root.put("status", "failure");
			String data = mapper.writeValueAsString(root);
			
			return new ResponseEntity<String>(data, HttpStatus.UNAUTHORIZED);		}
	}

	
	
	/**
	 * to get all the notes
	 * 
	 * @param UserId, request, response
	 * @return String message and status
	 * @throws Exception 
	 */
	@RequestMapping(value = "getNotes", method = RequestMethod.GET)
	public ResponseEntity<String> getNotes( HttpServletRequest request, HttpServletResponse response) throws Exception {

		HttpSession session = request.getSession(false);
		User user = (User) session.getAttribute("user");

		if (user != null && session != null) {
			
			try{
				List<ToDo> todoList = toDoService.getNotes(user);
				Collections.reverse(todoList);

				ObjectMapper mapper = new ObjectMapper();
				ObjectNode root = mapper.createObjectNode();
				
				root.put("status", "success");
				
				root.putPOJO("todo", todoList);
				root.putPOJO("user", user);
				
				String data = mapper.writeValueAsString(root);
				
				return new ResponseEntity<String>(data, HttpStatus.OK);
			}
			catch (Exception e) {
				return new ResponseEntity<String>(HttpStatus.BAD_GATEWAY);
			}
		
		}
		else {
			
			ObjectMapper mapper = new ObjectMapper();
			ObjectNode root = mapper.createObjectNode();
			
			root.put("status", "sign in");
		
			String data = mapper.writeValueAsString(root);
			System.out.println( data ); 
			
			return new ResponseEntity<String>(data, HttpStatus.UNAUTHORIZED);
		}
	}

	
	
	
	/**
	 * to delete the particular note
	 * 
	 * @param id
	 * @param request
	 * @param response
	 * @return String message and status
	 * @throws JsonProcessingException 
	 */
	
	@RequestMapping(value = "deleteNote/{id}", method = RequestMethod.POST)
	public ResponseEntity<String> deleteNote(@PathVariable("id") int id, HttpServletRequest request, HttpServletResponse response) throws JsonProcessingException {

		HttpSession session = request.getSession(false);
		User user = (User) session.getAttribute("user");
		if (session != null && user != null) {
			
			try
			{
				int result = toDoService.deleteNote(id);
				
				ObjectMapper mapper = new ObjectMapper();
				ObjectNode root = mapper.createObjectNode();
				
				root.put("status", "success");
				
				String data = mapper.writeValueAsString(root);
				System.out.println( data ); 
				
				return new ResponseEntity<String>(data, HttpStatus.OK);
				
			}
			catch (Exception e) {
				ObjectMapper mapper = new ObjectMapper();
				ObjectNode root = mapper.createObjectNode();
				
				root.put("status", "toDoNot there");
				String data = mapper.writeValueAsString(root); 
				
				return new ResponseEntity<String>(data, HttpStatus.NOT_FOUND);
			}
		}
		else{
		
			ObjectMapper mapper = new ObjectMapper();
			ObjectNode root = mapper.createObjectNode();
			
			root.put("status", "signIn first");
			String data = mapper.writeValueAsString(root);
			System.out.println( data );
		
		return new ResponseEntity<String>(data, HttpStatus.UNAUTHORIZED);
		
		}
	}

	/**
	 * to update the note
	 * 
	 * @param toDo
	 * @param toDoid
	 * @param request
	 * @param response
	 * @return String message and status
	 * @throws JsonProcessingException 
	 */
	@RequestMapping(value = "updateNote", method = RequestMethod.POST)
	public ResponseEntity<String> updateNote(@RequestBody ToDo toDo, HttpServletRequest request, HttpServletResponse response) throws JsonProcessingException {

		HttpSession session = request.getSession(false);
		User user = (User) session.getAttribute("user");

		if ( session != null && user != null ) {

			toDo.setUser(user);
			
			try{
				
				toDoService.updateNote(toDo);
			
				ObjectMapper mapper = new ObjectMapper();
				ObjectNode root = mapper.createObjectNode();
				
				root.put("message", "Updated");
				
				String data = mapper.writeValueAsString(root);
				
				return new ResponseEntity<String>(data, HttpStatus.OK);
			}
			catch (Exception e){
				
				ObjectMapper mapper = new ObjectMapper();
				ObjectNode root = mapper.createObjectNode();
				
				root.put("status", "not updated");
				
				String data = mapper.writeValueAsString(root);
				return new ResponseEntity<String>(data, HttpStatus.OK);
			}
				
		} else {
			
			ObjectMapper mapper = new ObjectMapper();
			ObjectNode root = mapper.createObjectNode();
			
			root.put("message", "login required");
			
			String data = mapper.writeValueAsString(root);
			
			return new ResponseEntity<String>(data, HttpStatus.UNAUTHORIZED);
		}
	}
	
	
	/**
	 * @param toDo
	 * @param request
	 * @param response
	 * @return ResponseEntity
	 * @throws JsonProcessingException
	 */
	@RequestMapping(value="/copyToDo", method=RequestMethod.POST)
	public ResponseEntity<String> copyToDo(@RequestBody ToDo toDo, HttpServletRequest request, HttpServletResponse response) throws JsonProcessingException {
		
		HttpSession session = request.getSession();
		User user = (User) session.getAttribute("user");
		
		if( session != null && user != null ) {
			
			
			toDo.setUser(user);
			try{
				toDoService.copyToDo( toDo );
			
				ObjectMapper mapper = new ObjectMapper();
				ObjectNode root = mapper.createObjectNode();
				
				root.put("message", "toDo Coppied");
				root.putPOJO("todoCopy", toDo);
				
				String data = mapper.writeValueAsString(root);
				
				return new ResponseEntity<String>(data, HttpStatus.OK);
			}
			catch(Exception e){
				ObjectMapper mapper = new ObjectMapper();
				ObjectNode root = mapper.createObjectNode();
				
				root.put("message", "toDo not Coppied");
				
				String data = mapper.writeValueAsString(root);
				
				return new ResponseEntity<String>(data, HttpStatus.NOT_ACCEPTABLE);
			}
			
		}
		else {
			ObjectMapper mapper = new ObjectMapper();
			ObjectNode root = mapper.createObjectNode();
			
			root.put("message", "login required");
			
			String data = mapper.writeValueAsString(root);
			
			return new ResponseEntity<String>(data, HttpStatus.UNAUTHORIZED);
		}
	}
	
	
	
	/**
	 * @param toDo
	 * @param request
	 * @param response
	 * @return
	 * @throws JsonProcessingException 
	 */
	@RequestMapping(value="update", method=RequestMethod.POST)
	public ResponseEntity<String> update (@RequestBody ToDo toDo, HttpServletRequest request, HttpServletResponse response) throws JsonProcessingException {
		
		HttpSession session = request.getSession();
		User user = (User) session.getAttribute("user");
		
		if( session != null && user != null ) {
			
			try{
				toDoService.update(toDo);
				
				ObjectMapper mapper = new ObjectMapper();
				ObjectNode root = mapper.createObjectNode();
				
				root.put("message", "updated");
				
				String data = mapper.writeValueAsString(root);
				
				return new ResponseEntity<String>(data, HttpStatus.OK);
			}
			catch (Exception e) {

				ObjectMapper mapper = new ObjectMapper();
				ObjectNode root = mapper.createObjectNode();
				
				root.put("message", "Not updated");
				
				String data = mapper.writeValueAsString(root);
				return new ResponseEntity<String>(HttpStatus.OK);
			}
		}
		else {
			ObjectMapper mapper = new ObjectMapper();
			ObjectNode root = mapper.createObjectNode();
			
			root.put("message", "signIn Required");
			String data = mapper.writeValueAsString(root);
			
			return new ResponseEntity<String>(data, HttpStatus.UNAUTHORIZED);
		}
		
		
	}
	
	
	@RequestMapping(value="collaborator")
	public ResponseEntity<String> collaborator(@RequestBody CollaboratorObject colbObj, HttpServletRequest request, HttpServletResponse response){
		
		HttpSession session = request.getSession();
		User user = (User) session.getAttribute("user");
		
		
		if( user != null ){
			
			User shareWithUser = userService.getUserByEmail( colbObj.getSharedWith() );
			
			if( shareWithUser != null ) {
				
				ToDo toDo = colbObj.getToDo();
				toDo.setSharedWithUserEmail(shareWithUser.getEmail());
				
				Collaborator collaborator = new Collaborator();
				collaborator.setUser(shareWithUser);
				collaborator.setToDo(colbObj.getToDo());
				
				user.setMobile(null);
				user.setPassword(null);
				
				collaborator.setSharedUser(user);
				
				toDoService.collaborator(collaborator,toDo);
			}
		}
		return null;
	}
	
	
	public ResponseEntity<String> setIndex(@RequestBody List indexOb,HttpServletRequest request, HttpServletResponse response){
		
	}

	
}
